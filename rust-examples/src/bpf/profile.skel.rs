// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("profile_bpf")
            .map("events", false)
            .prog("profile");

        builder.build()
    }

    #[derive(Default)]
    pub struct ProfileSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for ProfileSkelBuilder {
        type Output = OpenProfileSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenProfileSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenProfileSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenProfileSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenProfileSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenProfileMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenProfileMaps<'_> {
        pub fn events(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("events").unwrap()
        }
    }

    pub struct OpenProfileMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenProfileMapsMut<'_> {
        pub fn events(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("events").unwrap()
        }
    }

    pub struct OpenProfileProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenProfileProgs<'_> {
        pub fn profile(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("profile").unwrap()
        }
    }

    pub struct OpenProfileProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenProfileProgsMut<'_> {
        pub fn profile(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("profile").unwrap()
        }
    }

    pub struct OpenProfileSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenProfileSkel<'a> {
        type Output = ProfileSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<ProfileSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(ProfileSkel {
                obj,
                skel_config: self.skel_config,
                links: ProfileLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenProfileSkel<'_> {
        pub fn progs(&self) -> OpenProfileProgs<'_> {
            OpenProfileProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenProfileProgsMut<'_> {
            OpenProfileProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenProfileMaps<'_> {
            OpenProfileMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenProfileMapsMut<'_> {
            OpenProfileMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct ProfileMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl ProfileMaps<'_> {
        pub fn events(&self) -> &libbpf_rs::Map {
            self.inner.map("events").unwrap()
        }
    }

    pub struct ProfileMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl ProfileMapsMut<'_> {
        pub fn events(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("events").unwrap()
        }
    }

    pub struct ProfileProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl ProfileProgs<'_> {
        pub fn profile(&self) -> &libbpf_rs::Program {
            self.inner.prog("profile").unwrap()
        }
    }

    pub struct ProfileProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl ProfileProgsMut<'_> {
        pub fn profile(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("profile").unwrap()
        }
    }

    #[derive(Default)]
    pub struct ProfileLinks {
        pub profile: Option<libbpf_rs::Link>,
    }

    pub struct ProfileSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: ProfileLinks,
    }

    unsafe impl Send for ProfileSkel<'_> {}
    unsafe impl Sync for ProfileSkel<'_> {}

    impl Skel for ProfileSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = ProfileLinks {
                profile: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl ProfileSkel<'_> {
        pub fn progs(&self) -> ProfileProgs<'_> {
            ProfileProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> ProfileProgsMut<'_> {
            ProfileProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> ProfileMaps<'_> {
            ProfileMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> ProfileMapsMut<'_> {
            ProfileMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 108, 105, 99, 101, 110, 115, 101, 0,
        46, 109, 97, 112, 115, 0, 112, 114, 111, 102, 105, 108, 101, 46, 98, 112, 102, 46, 99, 0,
        76, 66, 66, 48, 95, 52, 0, 76, 66, 66, 48, 95, 51, 0, 112, 114, 111, 102, 105, 108, 101, 0,
        101, 118, 101, 110, 116, 115, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 112,
        101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101,
        120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 42, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 3,
        0, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 3, 0, 192, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
        1, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0,
        0, 0, 85, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 123, 26,
        248, 255, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 191, 9, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 8,
        0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2,
        0, 0, 32, 8, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 131, 0, 0, 0, 191, 7, 0, 0, 0,
        0, 0, 0, 183, 8, 0, 0, 1, 0, 0, 0, 21, 7, 30, 0, 0, 0, 0, 0, 99, 103, 4, 0, 0, 0, 0, 0,
        119, 9, 0, 0, 32, 0, 0, 0, 99, 151, 0, 0, 0, 0, 0, 0, 191, 118, 0, 0, 0, 0, 0, 0, 7, 6, 0,
        0, 8, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 16, 0, 0, 0, 133, 0, 0, 0, 16, 0,
        0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 115, 22, 0, 0, 0, 0, 0, 0, 191,
        114, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 32, 0, 0, 0, 183, 8, 0, 0, 0, 0, 0, 0, 121, 166, 248,
        255, 0, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 4, 0, 0, 183, 4, 0, 0, 0, 0,
        0, 0, 133, 0, 0, 0, 67, 0, 0, 0, 99, 7, 24, 0, 0, 0, 0, 0, 191, 114, 0, 0, 0, 0, 0, 0, 7,
        2, 0, 0, 32, 4, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 4, 0, 0, 183, 4, 0, 0, 0,
        1, 0, 0, 133, 0, 0, 0, 67, 0, 0, 0, 99, 7, 28, 0, 0, 0, 0, 0, 191, 113, 0, 0, 0, 0, 0, 0,
        183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 191, 128, 0, 0, 0, 0, 0, 0, 149, 0,
        0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159,
        235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 48, 1, 0, 0, 161, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 30, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 14, 7, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 49, 0, 0, 0,
        9, 0, 0, 0, 53, 0, 0, 0, 1, 0, 0, 12, 10, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 66, 0,
        0, 0, 0, 0, 0, 14, 13, 0, 0, 0, 1, 0, 0, 0, 136, 2, 0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 14, 0,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 144, 2, 0, 0, 1, 0, 0, 15, 16, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 16, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95,
        84, 89, 80, 69, 95, 95, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114,
        105, 101, 115, 0, 101, 118, 101, 110, 116, 115, 0, 99, 116, 120, 0, 112, 114, 111, 102,
        105, 108, 101, 0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47, 114, 111, 111,
        116, 47, 98, 112, 102, 45, 115, 97, 109, 112, 108, 101, 115, 47, 114, 117, 115, 116, 45,
        101, 120, 97, 109, 112, 108, 101, 115, 47, 115, 114, 99, 47, 98, 112, 102, 47, 112, 114,
        111, 102, 105, 108, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 112, 114, 111,
        102, 105, 108, 101, 40, 118, 111, 105, 100, 32, 42, 99, 116, 120, 41, 0, 9, 105, 110, 116,
        32, 112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101,
        110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100, 40, 41, 32, 62, 62, 32, 51, 50, 59, 0,
        9, 105, 110, 116, 32, 99, 112, 117, 95, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103, 101,
        116, 95, 115, 109, 112, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 105, 100, 40,
        41, 59, 0, 9, 101, 118, 101, 110, 116, 32, 61, 32, 98, 112, 102, 95, 114, 105, 110, 103,
        98, 117, 102, 95, 114, 101, 115, 101, 114, 118, 101, 40, 38, 101, 118, 101, 110, 116, 115,
        44, 32, 115, 105, 122, 101, 111, 102, 40, 42, 101, 118, 101, 110, 116, 41, 44, 32, 48, 41,
        59, 0, 9, 105, 102, 32, 40, 33, 101, 118, 101, 110, 116, 41, 0, 9, 101, 118, 101, 110, 116,
        45, 62, 99, 112, 117, 95, 105, 100, 32, 61, 32, 99, 112, 117, 95, 105, 100, 59, 0, 9, 101,
        118, 101, 110, 116, 45, 62, 112, 105, 100, 32, 61, 32, 112, 105, 100, 59, 0, 9, 105, 102,
        32, 40, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 99, 111,
        109, 109, 40, 101, 118, 101, 110, 116, 45, 62, 99, 111, 109, 109, 44, 32, 115, 105, 122,
        101, 111, 102, 40, 101, 118, 101, 110, 116, 45, 62, 99, 111, 109, 109, 41, 41, 41, 0, 9, 9,
        101, 118, 101, 110, 116, 45, 62, 99, 111, 109, 109, 91, 48, 93, 32, 61, 32, 48, 59, 0, 9,
        101, 118, 101, 110, 116, 45, 62, 107, 115, 116, 97, 99, 107, 95, 115, 122, 32, 61, 32, 98,
        112, 102, 95, 103, 101, 116, 95, 115, 116, 97, 99, 107, 40, 99, 116, 120, 44, 32, 101, 118,
        101, 110, 116, 45, 62, 107, 115, 116, 97, 99, 107, 44, 32, 115, 105, 122, 101, 111, 102,
        40, 101, 118, 101, 110, 116, 45, 62, 107, 115, 116, 97, 99, 107, 41, 44, 32, 48, 41, 59, 0,
        9, 9, 98, 112, 102, 95, 103, 101, 116, 95, 115, 116, 97, 99, 107, 40, 99, 116, 120, 44, 32,
        101, 118, 101, 110, 116, 45, 62, 117, 115, 116, 97, 99, 107, 44, 32, 115, 105, 122, 101,
        111, 102, 40, 101, 118, 101, 110, 116, 45, 62, 117, 115, 116, 97, 99, 107, 41, 44, 32, 66,
        80, 70, 95, 70, 95, 85, 83, 69, 82, 95, 83, 84, 65, 67, 75, 41, 59, 0, 9, 101, 118, 101,
        110, 116, 45, 62, 117, 115, 116, 97, 99, 107, 95, 115, 122, 32, 61, 0, 9, 98, 112, 102, 95,
        114, 105, 110, 103, 98, 117, 102, 95, 115, 117, 98, 109, 105, 116, 40, 101, 118, 101, 110,
        116, 44, 32, 48, 41, 59, 0, 125, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112,
        115, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 159, 235,
        1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 76, 1, 0, 0, 96, 1, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 150, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 150, 2, 0,
        0, 20, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 128, 0, 0, 0, 0, 72, 0, 0, 8, 0, 0, 0, 74, 0, 0,
        0, 151, 0, 0, 0, 12, 80, 0, 0, 24, 0, 0, 0, 74, 0, 0, 0, 196, 0, 0, 0, 15, 84, 0, 0, 40, 0,
        0, 0, 74, 0, 0, 0, 238, 0, 0, 0, 10, 100, 0, 0, 96, 0, 0, 0, 74, 0, 0, 0, 40, 1, 0, 0, 6,
        104, 0, 0, 104, 0, 0, 0, 74, 0, 0, 0, 53, 1, 0, 0, 16, 120, 0, 0, 112, 0, 0, 0, 74, 0, 0,
        0, 151, 0, 0, 0, 39, 80, 0, 0, 120, 0, 0, 0, 74, 0, 0, 0, 78, 1, 0, 0, 13, 116, 0, 0, 128,
        0, 0, 0, 74, 0, 0, 0, 97, 1, 0, 0, 34, 128, 0, 0, 144, 0, 0, 0, 74, 0, 0, 0, 97, 1, 0, 0,
        6, 128, 0, 0, 168, 0, 0, 0, 74, 0, 0, 0, 97, 1, 0, 0, 6, 128, 0, 0, 184, 0, 0, 0, 74, 0, 0,
        0, 158, 1, 0, 0, 18, 132, 0, 0, 192, 0, 0, 0, 74, 0, 0, 0, 180, 1, 0, 0, 47, 140, 0, 0,
        224, 0, 0, 0, 74, 0, 0, 0, 180, 1, 0, 0, 21, 140, 0, 0, 0, 1, 0, 0, 74, 0, 0, 0, 180, 1, 0,
        0, 19, 140, 0, 0, 8, 1, 0, 0, 74, 0, 0, 0, 5, 2, 0, 0, 29, 152, 0, 0, 24, 1, 0, 0, 74, 0,
        0, 0, 5, 2, 0, 0, 3, 152, 0, 0, 56, 1, 0, 0, 74, 0, 0, 0, 83, 2, 0, 0, 19, 148, 0, 0, 64,
        1, 0, 0, 74, 0, 0, 0, 103, 2, 0, 0, 2, 160, 0, 0, 88, 1, 0, 0, 74, 0, 0, 0, 134, 2, 0, 0,
        1, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 1, 0, 0,
        0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 2, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
        0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 2, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 93, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        24, 3, 0, 0, 0, 0, 0, 0, 233, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
