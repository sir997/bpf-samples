// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("tc_bpf")
            .map("tc_bpf.rodata", false)
            .prog("tc_ingress");

        builder.build()
    }

    #[derive(Default)]
    pub struct TcSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for TcSkelBuilder {
        type Output = OpenTcSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenTcSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenTcSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenTcSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenTcSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenTcMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenTcMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("tc_bpf.rodata").unwrap()
        }
    }

    pub struct OpenTcMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenTcMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("tc_bpf.rodata").unwrap()
        }
    }

    pub struct OpenTcProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenTcProgs<'_> {
        pub fn tc_ingress(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("tc_ingress").unwrap()
        }
    }

    pub struct OpenTcProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenTcProgsMut<'_> {
        pub fn tc_ingress(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("tc_ingress").unwrap()
        }
    }

    pub mod tc_rodata_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }

    pub struct OpenTcSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenTcSkel<'a> {
        type Output = TcSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<TcSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(TcSkel {
                obj,
                skel_config: self.skel_config,
                links: TcLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenTcSkel<'_> {
        pub fn progs(&self) -> OpenTcProgs<'_> {
            OpenTcProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenTcProgsMut<'_> {
            OpenTcProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenTcMaps<'_> {
            OpenTcMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenTcMapsMut<'_> {
            OpenTcMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct TcMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl TcMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("tc_bpf.rodata").unwrap()
        }
    }

    pub struct TcMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl TcMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("tc_bpf.rodata").unwrap()
        }
    }

    pub struct TcProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl TcProgs<'_> {
        pub fn tc_ingress(&self) -> &libbpf_rs::Program {
            self.inner.prog("tc_ingress").unwrap()
        }
    }

    pub struct TcProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl TcProgsMut<'_> {
        pub fn tc_ingress(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("tc_ingress").unwrap()
        }
    }

    #[derive(Default)]
    pub struct TcLinks {
        pub tc_ingress: Option<libbpf_rs::Link>,
    }

    pub struct TcSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: TcLinks,
    }

    unsafe impl Send for TcSkel<'_> {}
    unsafe impl Sync for TcSkel<'_> {}

    impl Skel for TcSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = TcLinks {
                tc_ingress: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl TcSkel<'_> {
        pub fn progs(&self) -> TcProgs<'_> {
            TcProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> TcProgsMut<'_> {
            TcProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> TcMaps<'_> {
            TcMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> TcMapsMut<'_> {
            TcMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 116, 99, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 116,
        99, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 52, 0, 116, 99, 95, 105, 110, 103,
        114, 101, 115, 115, 46, 95, 95, 95, 95, 102, 109, 116, 0, 116, 99, 95, 105, 110, 103, 114,
        101, 115, 115, 0, 95, 95, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 101, 108, 116, 99,
        0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 4, 0, 241, 255,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 3, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 52, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 18, 0, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 97, 18, 16, 0, 0, 0, 0, 0, 85, 2, 14, 0, 8, 0, 0, 0,
        97, 18, 76, 0, 0, 0, 0, 0, 97, 19, 80, 0, 0, 0, 0, 0, 191, 33, 0, 0, 0, 0, 0, 0, 7, 1, 0,
        0, 14, 0, 0, 0, 45, 49, 9, 0, 0, 0, 0, 0, 7, 2, 0, 0, 34, 0, 0, 0, 45, 50, 7, 0, 0, 0, 0,
        0, 113, 20, 8, 0, 0, 0, 0, 0, 105, 19, 2, 0, 0, 0, 0, 0, 220, 3, 0, 0, 16, 0, 0, 0, 24, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 36, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0,
        0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 71, 80, 76, 0, 71, 111, 116, 32, 73,
        80, 32, 112, 97, 99, 107, 101, 116, 58, 32, 116, 111, 116, 95, 108, 101, 110, 58, 32, 37,
        100, 44, 32, 116, 116, 108, 58, 32, 37, 100, 0, 96, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0,
        0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 124, 4, 0, 0, 124, 4, 0, 0, 179, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 34, 0, 0, 4, 192, 0, 0, 0, 11, 0, 0, 0, 3, 0,
        0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 64, 0, 0,
        0, 29, 0, 0, 0, 3, 0, 0, 0, 96, 0, 0, 0, 43, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 52, 0, 0,
        0, 3, 0, 0, 0, 160, 0, 0, 0, 65, 0, 0, 0, 3, 0, 0, 0, 192, 0, 0, 0, 74, 0, 0, 0, 3, 0, 0,
        0, 224, 0, 0, 0, 85, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 94, 0, 0, 0, 3, 0, 0, 0, 32, 1, 0, 0,
        110, 0, 0, 0, 3, 0, 0, 0, 64, 1, 0, 0, 118, 0, 0, 0, 3, 0, 0, 0, 96, 1, 0, 0, 127, 0, 0, 0,
        5, 0, 0, 0, 128, 1, 0, 0, 130, 0, 0, 0, 3, 0, 0, 0, 32, 2, 0, 0, 135, 0, 0, 0, 3, 0, 0, 0,
        64, 2, 0, 0, 146, 0, 0, 0, 3, 0, 0, 0, 96, 2, 0, 0, 151, 0, 0, 0, 3, 0, 0, 0, 128, 2, 0, 0,
        160, 0, 0, 0, 3, 0, 0, 0, 160, 2, 0, 0, 168, 0, 0, 0, 3, 0, 0, 0, 192, 2, 0, 0, 175, 0, 0,
        0, 3, 0, 0, 0, 224, 2, 0, 0, 186, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 196, 0, 0, 0, 7, 0, 0,
        0, 32, 3, 0, 0, 207, 0, 0, 0, 7, 0, 0, 0, 160, 3, 0, 0, 217, 0, 0, 0, 3, 0, 0, 0, 32, 4, 0,
        0, 229, 0, 0, 0, 3, 0, 0, 0, 64, 4, 0, 0, 240, 0, 0, 0, 3, 0, 0, 0, 96, 4, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 128, 4, 0, 0, 250, 0, 0, 0, 10, 0, 0, 0, 192, 4, 0, 0, 1, 1, 0, 0, 3, 0, 0,
        0, 0, 5, 0, 0, 10, 1, 0, 0, 3, 0, 0, 0, 32, 5, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 64, 5, 0, 0,
        19, 1, 0, 0, 3, 0, 0, 0, 128, 5, 0, 0, 28, 1, 0, 0, 14, 0, 0, 0, 160, 5, 0, 0, 40, 1, 0, 0,
        10, 0, 0, 0, 192, 5, 0, 0, 49, 1, 0, 0, 0, 0, 0, 8, 4, 0, 0, 0, 55, 1, 0, 0, 0, 0, 0, 1, 4,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0,
        0, 68, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3,
        0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 8, 0, 0, 0, 88, 1, 0, 0, 9, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 34, 0, 0, 0, 98, 1, 0, 0, 0, 0, 0, 8, 11, 0, 0, 0,
        104, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 8, 0, 0, 0, 123,
        1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 33, 0, 0, 0, 126, 1, 0, 0, 0, 0,
        0, 8, 15, 0, 0, 0, 131, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        13, 17, 0, 0, 0, 145, 1, 0, 0, 1, 0, 0, 0, 149, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0,
        1, 153, 1, 0, 0, 1, 0, 0, 12, 16, 0, 0, 0, 164, 1, 0, 0, 10, 0, 0, 132, 20, 0, 0, 0, 170,
        1, 0, 0, 14, 0, 0, 0, 0, 0, 0, 4, 174, 1, 0, 0, 14, 0, 0, 0, 4, 0, 0, 4, 182, 1, 0, 0, 14,
        0, 0, 0, 8, 0, 0, 0, 186, 1, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 194, 1, 0, 0, 20, 0, 0, 0, 32,
        0, 0, 0, 197, 1, 0, 0, 20, 0, 0, 0, 48, 0, 0, 0, 206, 1, 0, 0, 14, 0, 0, 0, 64, 0, 0, 0,
        43, 0, 0, 0, 14, 0, 0, 0, 72, 0, 0, 0, 210, 1, 0, 0, 23, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
        24, 0, 0, 0, 96, 0, 0, 0, 216, 1, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0, 223, 1, 0, 0, 0, 0, 0, 8,
        22, 0, 0, 0, 229, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 244, 1, 0, 0, 0, 0, 0, 8,
        21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 252,
        1, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 8, 0, 0, 0, 2, 2, 0, 0, 26, 0, 0,
        0, 0, 0, 0, 0, 8, 2, 0, 0, 26, 0, 0, 0, 32, 0, 0, 0, 14, 2, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0,
        21, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0,
        0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 26, 2, 0, 0, 0, 0, 0, 14, 28, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 10, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 0, 6, 0, 0, 0,
        36, 0, 0, 0, 36, 2, 0, 0, 0, 0, 0, 14, 31, 0, 0, 0, 0, 0, 0, 0, 55, 2, 0, 0, 0, 0, 0, 7, 0,
        0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 160, 3, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 29, 0,
        0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 168, 3, 0, 0, 1, 0, 0, 15, 36, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,
        0, 36, 0, 0, 0, 0, 95, 95, 115, 107, 95, 98, 117, 102, 102, 0, 108, 101, 110, 0, 112, 107,
        116, 95, 116, 121, 112, 101, 0, 109, 97, 114, 107, 0, 113, 117, 101, 117, 101, 95, 109, 97,
        112, 112, 105, 110, 103, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0, 118, 108, 97, 110,
        95, 112, 114, 101, 115, 101, 110, 116, 0, 118, 108, 97, 110, 95, 116, 99, 105, 0, 118, 108,
        97, 110, 95, 112, 114, 111, 116, 111, 0, 112, 114, 105, 111, 114, 105, 116, 121, 0, 105,
        110, 103, 114, 101, 115, 115, 95, 105, 102, 105, 110, 100, 101, 120, 0, 105, 102, 105, 110,
        100, 101, 120, 0, 116, 99, 95, 105, 110, 100, 101, 120, 0, 99, 98, 0, 104, 97, 115, 104, 0,
        116, 99, 95, 99, 108, 97, 115, 115, 105, 100, 0, 100, 97, 116, 97, 0, 100, 97, 116, 97, 95,
        101, 110, 100, 0, 110, 97, 112, 105, 95, 105, 100, 0, 102, 97, 109, 105, 108, 121, 0, 114,
        101, 109, 111, 116, 101, 95, 105, 112, 52, 0, 108, 111, 99, 97, 108, 95, 105, 112, 52, 0,
        114, 101, 109, 111, 116, 101, 95, 105, 112, 54, 0, 108, 111, 99, 97, 108, 95, 105, 112, 54,
        0, 114, 101, 109, 111, 116, 101, 95, 112, 111, 114, 116, 0, 108, 111, 99, 97, 108, 95, 112,
        111, 114, 116, 0, 100, 97, 116, 97, 95, 109, 101, 116, 97, 0, 116, 115, 116, 97, 109, 112,
        0, 119, 105, 114, 101, 95, 108, 101, 110, 0, 103, 115, 111, 95, 115, 101, 103, 115, 0, 103,
        115, 111, 95, 115, 105, 122, 101, 0, 116, 115, 116, 97, 109, 112, 95, 116, 121, 112, 101,
        0, 104, 119, 116, 115, 116, 97, 109, 112, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105,
        103, 110, 101, 100, 32, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69,
        95, 84, 89, 80, 69, 95, 95, 0, 102, 108, 111, 119, 95, 107, 101, 121, 115, 0, 95, 95, 117,
        54, 52, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 108, 111,
        110, 103, 0, 115, 107, 0, 95, 95, 117, 56, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        99, 104, 97, 114, 0, 99, 116, 120, 0, 105, 110, 116, 0, 116, 99, 95, 105, 110, 103, 114,
        101, 115, 115, 0, 105, 112, 104, 100, 114, 0, 105, 104, 108, 0, 118, 101, 114, 115, 105,
        111, 110, 0, 116, 111, 115, 0, 116, 111, 116, 95, 108, 101, 110, 0, 105, 100, 0, 102, 114,
        97, 103, 95, 111, 102, 102, 0, 116, 116, 108, 0, 99, 104, 101, 99, 107, 0, 95, 95, 98, 101,
        49, 54, 0, 95, 95, 117, 49, 54, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 115, 104,
        111, 114, 116, 0, 95, 95, 115, 117, 109, 49, 54, 0, 97, 100, 100, 114, 115, 0, 115, 97,
        100, 100, 114, 0, 100, 97, 100, 100, 114, 0, 95, 95, 98, 101, 51, 50, 0, 99, 104, 97, 114,
        0, 95, 95, 108, 105, 99, 101, 110, 115, 101, 0, 116, 99, 95, 105, 110, 103, 114, 101, 115,
        115, 46, 95, 95, 95, 95, 102, 109, 116, 0, 98, 112, 102, 95, 115, 111, 99, 107, 0, 98, 112,
        102, 95, 102, 108, 111, 119, 95, 107, 101, 121, 115, 0, 47, 114, 111, 111, 116, 47, 98,
        112, 102, 45, 115, 97, 109, 112, 108, 101, 115, 47, 114, 117, 115, 116, 45, 101, 120, 97,
        109, 112, 108, 101, 115, 47, 115, 114, 99, 47, 98, 112, 102, 47, 116, 99, 46, 98, 112, 102,
        46, 99, 0, 32, 32, 32, 32, 105, 102, 32, 40, 99, 116, 120, 45, 62, 112, 114, 111, 116, 111,
        99, 111, 108, 32, 33, 61, 32, 98, 112, 102, 95, 104, 116, 111, 110, 115, 40, 69, 84, 72,
        95, 80, 95, 73, 80, 41, 41, 0, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 100, 97, 116,
        97, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 95, 95, 117, 54, 52, 41, 99, 116,
        120, 45, 62, 100, 97, 116, 97, 59, 0, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 100, 97,
        116, 97, 95, 101, 110, 100, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 95, 95,
        117, 54, 52, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97, 95, 101, 110, 100, 59, 0, 32, 32,
        32, 32, 105, 102, 32, 40, 40, 118, 111, 105, 100, 32, 42, 41, 40, 108, 50, 32, 43, 32, 49,
        41, 32, 62, 32, 100, 97, 116, 97, 95, 101, 110, 100, 41, 0, 32, 32, 32, 32, 98, 112, 102,
        95, 112, 114, 105, 110, 116, 107, 40, 34, 71, 111, 116, 32, 73, 80, 32, 112, 97, 99, 107,
        101, 116, 58, 32, 116, 111, 116, 95, 108, 101, 110, 58, 32, 37, 100, 44, 32, 116, 116, 108,
        58, 32, 37, 100, 34, 44, 32, 98, 112, 102, 95, 110, 116, 111, 104, 115, 40, 108, 51, 45,
        62, 116, 111, 116, 95, 108, 101, 110, 41, 44, 32, 108, 51, 45, 62, 116, 116, 108, 41, 59,
        0, 125, 0, 48, 58, 52, 0, 48, 58, 49, 53, 0, 48, 58, 49, 54, 0, 48, 58, 54, 0, 48, 58, 51,
        0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 116, 99, 0, 0,
        159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 140, 0, 0, 0, 160, 0, 0,
        0, 92, 0, 0, 0, 8, 0, 0, 0, 176, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 16, 0, 0, 0,
        176, 3, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 78, 2, 0, 0, 127, 2, 0, 0, 14, 76, 0, 0, 8, 0, 0, 0,
        78, 2, 0, 0, 127, 2, 0, 0, 9, 76, 0, 0, 16, 0, 0, 0, 78, 2, 0, 0, 173, 2, 0, 0, 38, 60, 0,
        0, 24, 0, 0, 0, 78, 2, 0, 0, 216, 2, 0, 0, 42, 56, 0, 0, 32, 0, 0, 0, 78, 2, 0, 0, 11, 3,
        0, 0, 21, 92, 0, 0, 48, 0, 0, 0, 78, 2, 0, 0, 11, 3, 0, 0, 9, 92, 0, 0, 72, 0, 0, 0, 78, 2,
        0, 0, 48, 3, 0, 0, 5, 120, 0, 0, 128, 0, 0, 0, 78, 2, 0, 0, 136, 3, 0, 0, 1, 128, 0, 0, 16,
        0, 0, 0, 176, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 138, 3, 0, 0, 0, 0, 0, 0, 16, 0,
        0, 0, 2, 0, 0, 0, 142, 3, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 147, 3, 0, 0, 0, 0, 0,
        0, 72, 0, 0, 0, 19, 0, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 19, 0, 0, 0, 156, 3, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0,
        0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0,
        0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 28, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 2, 0, 0,
        0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        48, 2, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 71, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 136, 10, 0, 0, 0, 0, 0, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
