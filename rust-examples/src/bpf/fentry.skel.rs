// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("fentry_bpf")
            .map("fentry_b.rodata", false)
            .prog("do_unlinkat")
            .prog("do_unlinkat_exit");

        builder.build()
    }

    #[derive(Default)]
    pub struct FentrySkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for FentrySkelBuilder {
        type Output = OpenFentrySkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenFentrySkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenFentrySkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenFentrySkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenFentrySkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenFentryMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenFentryMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("fentry_b.rodata").unwrap()
        }
    }

    pub struct OpenFentryMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenFentryMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("fentry_b.rodata").unwrap()
        }
    }

    pub struct OpenFentryProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenFentryProgs<'_> {
        pub fn do_unlinkat(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("do_unlinkat").unwrap()
        }

        pub fn do_unlinkat_exit(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("do_unlinkat_exit").unwrap()
        }
    }

    pub struct OpenFentryProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenFentryProgsMut<'_> {
        pub fn do_unlinkat(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("do_unlinkat").unwrap()
        }

        pub fn do_unlinkat_exit(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("do_unlinkat_exit").unwrap()
        }
    }

    pub mod fentry_rodata_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }

    pub struct OpenFentrySkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenFentrySkel<'a> {
        type Output = FentrySkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<FentrySkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(FentrySkel {
                obj,
                skel_config: self.skel_config,
                links: FentryLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenFentrySkel<'_> {
        pub fn progs(&self) -> OpenFentryProgs<'_> {
            OpenFentryProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenFentryProgsMut<'_> {
            OpenFentryProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenFentryMaps<'_> {
            OpenFentryMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenFentryMapsMut<'_> {
            OpenFentryMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct FentryMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl FentryMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("fentry_b.rodata").unwrap()
        }
    }

    pub struct FentryMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl FentryMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("fentry_b.rodata").unwrap()
        }
    }

    pub struct FentryProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl FentryProgs<'_> {
        pub fn do_unlinkat(&self) -> &libbpf_rs::Program {
            self.inner.prog("do_unlinkat").unwrap()
        }

        pub fn do_unlinkat_exit(&self) -> &libbpf_rs::Program {
            self.inner.prog("do_unlinkat_exit").unwrap()
        }
    }

    pub struct FentryProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl FentryProgsMut<'_> {
        pub fn do_unlinkat(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("do_unlinkat").unwrap()
        }

        pub fn do_unlinkat_exit(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("do_unlinkat_exit").unwrap()
        }
    }

    #[derive(Default)]
    pub struct FentryLinks {
        pub do_unlinkat: Option<libbpf_rs::Link>,
        pub do_unlinkat_exit: Option<libbpf_rs::Link>,
    }

    pub struct FentrySkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: FentryLinks,
    }

    unsafe impl Send for FentrySkel<'_> {}
    unsafe impl Sync for FentrySkel<'_> {}

    impl Skel for FentrySkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = FentryLinks {
                do_unlinkat: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                do_unlinkat_exit: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl FentrySkel<'_> {
        pub fn progs(&self) -> FentryProgs<'_> {
            FentryProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> FentryProgsMut<'_> {
            FentryProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> FentryMaps<'_> {
            FentryMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> FentryMapsMut<'_> {
            FentryMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 11, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 102, 101, 110, 116, 114, 121, 47, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97,
        116, 0, 102, 101, 120, 105, 116, 47, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97, 116,
        0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 102, 101, 110,
        116, 114, 121, 46, 98, 112, 102, 46, 99, 0, 95, 95, 95, 95, 100, 111, 95, 117, 110, 108,
        105, 110, 107, 97, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 100, 111, 95,
        117, 110, 108, 105, 110, 107, 97, 116, 95, 101, 120, 105, 116, 46, 95, 95, 95, 95, 102,
        109, 116, 0, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97, 116, 0, 100, 111, 95, 117,
        110, 108, 105, 110, 107, 97, 116, 95, 101, 120, 105, 116, 0, 76, 73, 67, 69, 78, 83, 69, 0,
        46, 114, 101, 108, 102, 101, 110, 116, 114, 121, 47, 100, 111, 95, 117, 110, 108, 105, 110,
        107, 97, 116, 0, 46, 114, 101, 108, 102, 101, 120, 105, 116, 47, 100, 111, 95, 117, 110,
        108, 105, 110, 107, 97, 116, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 4, 0,
        241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 107, 0, 0, 0, 1, 0, 6, 0, 33, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 18, 0, 3, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        0, 0, 0, 0, 0, 0, 121, 22, 8, 0, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 121, 100, 0, 0, 0,
        0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        2, 0, 0, 33, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0,
        0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 22, 16, 0, 0, 0, 0, 0, 121, 23, 8, 0, 0, 0, 0, 0,
        133, 0, 0, 0, 14, 0, 0, 0, 121, 116, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 24, 1, 0,
        0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 43, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0,
        0, 191, 101, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0,
        0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 102, 101, 110, 116,
        114, 121, 58, 32, 112, 105, 100, 32, 61, 32, 37, 100, 44, 32, 102, 105, 108, 101, 110, 97,
        109, 101, 32, 61, 32, 37, 115, 10, 0, 102, 101, 120, 105, 116, 58, 32, 112, 105, 100, 32,
        61, 32, 37, 100, 44, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 61, 32, 37, 115, 44,
        32, 114, 101, 116, 32, 61, 32, 37, 108, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159, 235, 1,
        0, 24, 0, 0, 0, 0, 0, 0, 0, 188, 1, 0, 0, 188, 1, 0, 0, 121, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 4,
        0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 28, 0,
        0, 0, 1, 0, 0, 12, 3, 0, 0, 0, 40, 0, 0, 0, 5, 0, 0, 4, 32, 0, 0, 0, 49, 0, 0, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 54, 0, 0, 0, 7, 0, 0, 0, 64, 0, 0, 0, 59, 0, 0, 0, 4, 0, 0, 0, 128, 0, 0, 0,
        66, 0, 0, 0, 10, 0, 0, 0, 192, 0, 0, 0, 72, 0, 0, 0, 11, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 9, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 1, 1, 0,
        0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 103,
        0, 0, 0, 1, 0, 0, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0,
        0, 13, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
        0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 33, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 43, 0, 0, 0, 152,
        0, 0, 0, 0, 0, 0, 14, 18, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 68, 2,
        0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 76, 2, 0, 0, 2, 0, 0,
        15, 76, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 19, 0, 0, 0, 33, 0, 0, 0, 43, 0, 0,
        0, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 108, 111, 110,
        103, 0, 99, 116, 120, 0, 105, 110, 116, 0, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97,
        116, 0, 102, 105, 108, 101, 110, 97, 109, 101, 0, 110, 97, 109, 101, 0, 117, 112, 116, 114,
        0, 114, 101, 102, 99, 110, 116, 0, 97, 110, 97, 109, 101, 0, 105, 110, 97, 109, 101, 0, 99,
        104, 97, 114, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95,
        95, 0, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97, 116, 95, 101, 120, 105, 116, 0, 76,
        73, 67, 69, 78, 83, 69, 0, 95, 95, 95, 95, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97,
        116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 100, 111, 95, 117, 110, 108,
        105, 110, 107, 97, 116, 95, 101, 120, 105, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 97,
        117, 100, 105, 116, 95, 110, 97, 109, 101, 115, 0, 47, 114, 111, 111, 116, 47, 98, 112,
        102, 45, 115, 97, 109, 112, 108, 101, 115, 47, 114, 117, 115, 116, 45, 101, 120, 97, 109,
        112, 108, 101, 115, 47, 115, 114, 99, 47, 98, 112, 102, 47, 102, 101, 110, 116, 114, 121,
        46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 66, 80, 70, 95, 80, 82, 79, 71, 40, 100,
        111, 95, 117, 110, 108, 105, 110, 107, 97, 116, 44, 32, 105, 110, 116, 32, 100, 102, 100,
        44, 32, 115, 116, 114, 117, 99, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 42,
        110, 97, 109, 101, 41, 0, 32, 32, 32, 32, 112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100,
        40, 41, 32, 62, 62, 32, 51, 50, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105,
        110, 116, 107, 40, 34, 102, 101, 110, 116, 114, 121, 58, 32, 112, 105, 100, 32, 61, 32, 37,
        100, 44, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 61, 32, 37, 115, 92, 110, 34, 44,
        32, 112, 105, 100, 44, 32, 110, 97, 109, 101, 45, 62, 110, 97, 109, 101, 41, 59, 0, 105,
        110, 116, 32, 66, 80, 70, 95, 80, 82, 79, 71, 40, 100, 111, 95, 117, 110, 108, 105, 110,
        107, 97, 116, 95, 101, 120, 105, 116, 44, 32, 105, 110, 116, 32, 100, 102, 100, 44, 32,
        115, 116, 114, 117, 99, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 42, 110, 97,
        109, 101, 44, 32, 108, 111, 110, 103, 32, 114, 101, 116, 41, 0, 32, 32, 32, 32, 98, 112,
        102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 102, 101, 120, 105, 116, 58, 32, 112, 105,
        100, 32, 61, 32, 37, 100, 44, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 61, 32, 37,
        115, 44, 32, 114, 101, 116, 32, 61, 32, 37, 108, 100, 92, 110, 34, 44, 32, 112, 105, 100,
        44, 32, 110, 97, 109, 101, 45, 62, 110, 97, 109, 101, 44, 32, 114, 101, 116, 41, 59, 0, 48,
        58, 48, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 102,
        101, 110, 116, 114, 121, 47, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97, 116, 0, 102,
        101, 120, 105, 116, 47, 100, 111, 95, 117, 110, 108, 105, 110, 107, 97, 116, 0, 0, 0, 0,
        159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 212, 0, 0, 0, 248, 0, 0,
        0, 52, 0, 0, 0, 8, 0, 0, 0, 84, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 103, 2, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 84, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 193,
        0, 0, 0, 246, 0, 0, 0, 5, 32, 0, 0, 8, 0, 0, 0, 193, 0, 0, 0, 48, 1, 0, 0, 11, 48, 0, 0,
        16, 0, 0, 0, 193, 0, 0, 0, 92, 1, 0, 0, 5, 52, 0, 0, 24, 0, 0, 0, 193, 0, 0, 0, 48, 1, 0,
        0, 38, 48, 0, 0, 32, 0, 0, 0, 193, 0, 0, 0, 92, 1, 0, 0, 5, 52, 0, 0, 72, 0, 0, 0, 193, 0,
        0, 0, 246, 0, 0, 0, 5, 32, 0, 0, 103, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 162,
        1, 0, 0, 5, 72, 0, 0, 16, 0, 0, 0, 193, 0, 0, 0, 48, 1, 0, 0, 11, 88, 0, 0, 24, 0, 0, 0,
        193, 0, 0, 0, 235, 1, 0, 0, 5, 92, 0, 0, 32, 0, 0, 0, 193, 0, 0, 0, 48, 1, 0, 0, 38, 88, 0,
        0, 40, 0, 0, 0, 193, 0, 0, 0, 235, 1, 0, 0, 5, 92, 0, 0, 88, 0, 0, 0, 193, 0, 0, 0, 162, 1,
        0, 0, 5, 72, 0, 0, 16, 0, 0, 0, 84, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 64, 2, 0,
        0, 0, 0, 0, 0, 103, 2, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 6, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 1, 0, 0, 0,
        6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 2, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
        0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 2, 0, 0, 0, 0, 0, 0,
        13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 62, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 2, 0,
        0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 56, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 3, 0, 0, 0, 0, 0, 0, 77, 4, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 7, 0, 0, 0, 0, 0, 0, 76, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
