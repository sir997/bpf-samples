// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("minimal_legacy_bpf")
            .map("my_pid_map", false)
            .map(".rodata.str1.1", false)
            .prog("handle_tp");

        builder.build()
    }

    #[derive(Default)]
    pub struct MinimalLegacySkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for MinimalLegacySkelBuilder {
        type Output = OpenMinimalLegacySkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenMinimalLegacySkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenMinimalLegacySkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenMinimalLegacySkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenMinimalLegacySkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenMinimalLegacyMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenMinimalLegacyMaps<'_> {
        pub fn my_pid_map(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("my_pid_map").unwrap()
        }
    }

    pub struct OpenMinimalLegacyMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenMinimalLegacyMapsMut<'_> {
        pub fn my_pid_map(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("my_pid_map").unwrap()
        }
    }

    pub struct OpenMinimalLegacyProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenMinimalLegacyProgs<'_> {
        pub fn handle_tp(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("handle_tp").unwrap()
        }
    }

    pub struct OpenMinimalLegacyProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenMinimalLegacyProgsMut<'_> {
        pub fn handle_tp(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("handle_tp").unwrap()
        }
    }

    pub struct OpenMinimalLegacySkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenMinimalLegacySkel<'a> {
        type Output = MinimalLegacySkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<MinimalLegacySkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(MinimalLegacySkel {
                obj,
                skel_config: self.skel_config,
                links: MinimalLegacyLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenMinimalLegacySkel<'_> {
        pub fn progs(&self) -> OpenMinimalLegacyProgs<'_> {
            OpenMinimalLegacyProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenMinimalLegacyProgsMut<'_> {
            OpenMinimalLegacyProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenMinimalLegacyMaps<'_> {
            OpenMinimalLegacyMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenMinimalLegacyMapsMut<'_> {
            OpenMinimalLegacyMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct MinimalLegacyMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl MinimalLegacyMaps<'_> {
        pub fn my_pid_map(&self) -> &libbpf_rs::Map {
            self.inner.map("my_pid_map").unwrap()
        }
    }

    pub struct MinimalLegacyMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl MinimalLegacyMapsMut<'_> {
        pub fn my_pid_map(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("my_pid_map").unwrap()
        }
    }

    pub struct MinimalLegacyProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl MinimalLegacyProgs<'_> {
        pub fn handle_tp(&self) -> &libbpf_rs::Program {
            self.inner.prog("handle_tp").unwrap()
        }
    }

    pub struct MinimalLegacyProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl MinimalLegacyProgsMut<'_> {
        pub fn handle_tp(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("handle_tp").unwrap()
        }
    }

    #[derive(Default)]
    pub struct MinimalLegacyLinks {
        pub handle_tp: Option<libbpf_rs::Link>,
    }

    pub struct MinimalLegacySkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: MinimalLegacyLinks,
    }

    unsafe impl Send for MinimalLegacySkel<'_> {}
    unsafe impl Sync for MinimalLegacySkel<'_> {}

    impl Skel for MinimalLegacySkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = MinimalLegacyLinks {
                handle_tp: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl MinimalLegacySkel<'_> {
        pub fn progs(&self) -> MinimalLegacyProgs<'_> {
            MinimalLegacyProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> MinimalLegacyProgsMut<'_> {
            MinimalLegacyProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> MinimalLegacyMaps<'_> {
            MinimalLegacyMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> MinimalLegacyMapsMut<'_> {
            MinimalLegacyMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
        64, 0, 10, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 116, 112, 47, 115, 121, 115, 99, 97, 108, 108, 115, 47, 115, 121, 115, 95, 101, 110,
        116, 101, 114, 95, 119, 114, 105, 116, 101, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46,
        109, 97, 112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 46, 115, 116, 114, 49, 46, 49, 0,
        109, 105, 110, 105, 109, 97, 108, 95, 108, 101, 103, 97, 99, 121, 46, 98, 112, 102, 46, 99,
        0, 76, 66, 66, 48, 95, 51, 0, 104, 97, 110, 100, 108, 101, 95, 116, 112, 0, 109, 121, 95,
        112, 105, 100, 95, 109, 97, 112, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 116,
        112, 47, 115, 121, 115, 99, 97, 108, 108, 115, 47, 115, 121, 115, 95, 101, 110, 116, 101,
        114, 95, 119, 114, 105, 116, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 74, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 3, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
        0, 0, 0, 0, 0, 123, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0,
        183, 1, 0, 0, 0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 191, 6,
        0, 0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 191, 1, 0, 0, 0, 0, 0, 0,
        183, 0, 0, 0, 1, 0, 0, 0, 21, 1, 20, 0, 0, 0, 0, 0, 119, 6, 0, 0, 32, 0, 0, 0, 97, 17, 0,
        0, 0, 0, 0, 0, 93, 97, 17, 0, 0, 0, 0, 0, 183, 1, 0, 0, 100, 46, 10, 0, 99, 26, 248, 255,
        0, 0, 0, 0, 24, 1, 0, 0, 111, 109, 32, 80, 0, 0, 0, 0, 73, 68, 32, 37, 123, 26, 240, 255,
        0, 0, 0, 0, 24, 1, 0, 0, 103, 101, 114, 101, 0, 0, 0, 0, 100, 32, 102, 114, 123, 26, 232,
        255, 0, 0, 0, 0, 24, 1, 0, 0, 66, 80, 70, 32, 0, 0, 0, 0, 116, 114, 105, 103, 123, 26, 224,
        255, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 224, 255, 255, 255, 183, 2, 0, 0,
        28, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
        149, 0, 0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 66, 80, 70, 32, 116, 114, 105, 103, 103, 101, 114, 101, 100, 32, 102, 114, 111, 109, 32,
        80, 73, 68, 32, 37, 100, 46, 10, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0,
        0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 136, 1, 0, 0, 136, 1, 0, 0, 191, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
        0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0,
        0, 0, 8, 9, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 11, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0,
        48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 7,
        0, 0, 0, 128, 0, 0, 0, 69, 0, 0, 0, 10, 0, 0, 0, 192, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 14,
        12, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0,
        0, 0, 86, 0, 0, 0, 14, 0, 0, 0, 90, 0, 0, 0, 1, 0, 0, 12, 15, 0, 0, 0, 100, 0, 0, 0, 0, 0,
        0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0,
        13, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 14, 18, 0, 0, 0, 1, 0, 0, 0, 149, 1, 0, 0, 1, 0, 0, 15,
        13, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 157, 1, 0, 0, 1, 0, 0, 15, 32, 0, 0, 0,
        13, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95,
        83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 117, 51, 50, 0, 117, 110, 115, 105, 103,
        110, 101, 100, 32, 105, 110, 116, 0, 112, 105, 100, 95, 116, 0, 116, 121, 112, 101, 0, 109,
        97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 107, 101, 121, 0, 118, 97, 108, 117,
        101, 0, 109, 121, 95, 112, 105, 100, 95, 109, 97, 112, 0, 99, 116, 120, 0, 104, 97, 110,
        100, 108, 101, 95, 116, 112, 0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47,
        114, 111, 111, 116, 47, 98, 112, 102, 45, 115, 97, 109, 112, 108, 101, 115, 47, 114, 117,
        115, 116, 45, 101, 120, 97, 109, 112, 108, 101, 115, 47, 115, 114, 99, 47, 98, 112, 102,
        47, 109, 105, 110, 105, 109, 97, 108, 95, 108, 101, 103, 97, 99, 121, 46, 98, 112, 102, 46,
        99, 0, 105, 110, 116, 32, 104, 97, 110, 100, 108, 101, 95, 116, 112, 40, 118, 111, 105,
        100, 32, 42, 99, 116, 120, 41, 0, 9, 117, 51, 50, 32, 105, 110, 100, 101, 120, 32, 61, 32,
        48, 59, 0, 9, 112, 105, 100, 95, 116, 32, 112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100,
        40, 41, 32, 62, 62, 32, 51, 50, 59, 0, 9, 112, 105, 100, 95, 116, 32, 42, 109, 121, 95,
        112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112, 95, 108, 111, 111, 107, 117,
        112, 95, 101, 108, 101, 109, 40, 38, 109, 121, 95, 112, 105, 100, 95, 109, 97, 112, 44, 32,
        38, 105, 110, 100, 101, 120, 41, 59, 0, 9, 105, 102, 32, 40, 33, 109, 121, 95, 112, 105,
        100, 32, 124, 124, 32, 42, 109, 121, 95, 112, 105, 100, 32, 33, 61, 32, 112, 105, 100, 41,
        0, 9, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 66, 80, 70, 32, 116, 114,
        105, 103, 103, 101, 114, 101, 100, 32, 102, 114, 111, 109, 32, 80, 73, 68, 32, 37, 100, 46,
        92, 110, 34, 44, 32, 112, 105, 100, 41, 59, 0, 125, 0, 108, 105, 99, 101, 110, 115, 101, 0,
        46, 109, 97, 112, 115, 0, 116, 112, 47, 115, 121, 115, 99, 97, 108, 108, 115, 47, 115, 121,
        115, 95, 101, 110, 116, 101, 114, 95, 119, 114, 105, 116, 101, 0, 0, 159, 235, 1, 0, 32, 0,
        0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 188, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 163, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 163, 1, 0, 0, 11, 0,
        0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 174, 0, 0, 0, 0, 88, 0, 0, 8, 0, 0, 0, 113, 0, 0, 0, 199,
        0, 0, 0, 6, 96, 0, 0, 16, 0, 0, 0, 113, 0, 0, 0, 215, 0, 0, 0, 14, 100, 0, 0, 40, 0, 0, 0,
        113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 113, 0, 0, 0, 6, 1, 0, 0, 18, 104, 0, 0,
        88, 0, 0, 0, 113, 0, 0, 0, 65, 1, 0, 0, 14, 112, 0, 0, 96, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 104, 0, 0, 0, 113, 0, 0, 0, 65, 1, 0, 0, 17, 112, 0, 0, 112, 0, 0, 0, 113,
        0, 0, 0, 65, 1, 0, 0, 6, 112, 0, 0, 128, 0, 0, 0, 113, 0, 0, 0, 97, 1, 0, 0, 2, 124, 0, 0,
        0, 1, 0, 0, 113, 0, 0, 0, 147, 1, 0, 0, 1, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0,
        32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
        168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0,
        0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 1,
        0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 184, 2, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 2, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 9, 0, 0,
        0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 2, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
        0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 163,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0,
        0, 95, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 168, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 6,
        0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
