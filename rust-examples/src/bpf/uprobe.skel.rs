// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("uprobe_bpf")
            .map("uprobe_b.rodata", false)
            .prog("uprobe_add")
            .prog("uretprobe_add")
            .prog("uprobe_sub")
            .prog("uretprobe_sub");

        builder.build()
    }

    #[derive(Default)]
    pub struct UprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for UprobeSkelBuilder {
        type Output = OpenUprobeSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenUprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenUprobeSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenUprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenUprobeSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenUprobeMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenUprobeMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("uprobe_b.rodata").unwrap()
        }
    }

    pub struct OpenUprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenUprobeMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("uprobe_b.rodata").unwrap()
        }
    }

    pub struct OpenUprobeProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenUprobeProgs<'_> {
        pub fn uprobe_add(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("uprobe_add").unwrap()
        }

        pub fn uretprobe_add(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("uretprobe_add").unwrap()
        }

        pub fn uprobe_sub(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("uprobe_sub").unwrap()
        }

        pub fn uretprobe_sub(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("uretprobe_sub").unwrap()
        }
    }

    pub struct OpenUprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenUprobeProgsMut<'_> {
        pub fn uprobe_add(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("uprobe_add").unwrap()
        }

        pub fn uretprobe_add(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("uretprobe_add").unwrap()
        }

        pub fn uprobe_sub(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("uprobe_sub").unwrap()
        }

        pub fn uretprobe_sub(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("uretprobe_sub").unwrap()
        }
    }

    pub mod uprobe_rodata_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }

    pub struct OpenUprobeSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenUprobeSkel<'a> {
        type Output = UprobeSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<UprobeSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(UprobeSkel {
                obj,
                skel_config: self.skel_config,
                links: UprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenUprobeSkel<'_> {
        pub fn progs(&self) -> OpenUprobeProgs<'_> {
            OpenUprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenUprobeProgsMut<'_> {
            OpenUprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenUprobeMaps<'_> {
            OpenUprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenUprobeMapsMut<'_> {
            OpenUprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct UprobeMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl UprobeMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("uprobe_b.rodata").unwrap()
        }
    }

    pub struct UprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl UprobeMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("uprobe_b.rodata").unwrap()
        }
    }

    pub struct UprobeProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl UprobeProgs<'_> {
        pub fn uprobe_add(&self) -> &libbpf_rs::Program {
            self.inner.prog("uprobe_add").unwrap()
        }

        pub fn uretprobe_add(&self) -> &libbpf_rs::Program {
            self.inner.prog("uretprobe_add").unwrap()
        }

        pub fn uprobe_sub(&self) -> &libbpf_rs::Program {
            self.inner.prog("uprobe_sub").unwrap()
        }

        pub fn uretprobe_sub(&self) -> &libbpf_rs::Program {
            self.inner.prog("uretprobe_sub").unwrap()
        }
    }

    pub struct UprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl UprobeProgsMut<'_> {
        pub fn uprobe_add(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("uprobe_add").unwrap()
        }

        pub fn uretprobe_add(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("uretprobe_add").unwrap()
        }

        pub fn uprobe_sub(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("uprobe_sub").unwrap()
        }

        pub fn uretprobe_sub(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("uretprobe_sub").unwrap()
        }
    }

    #[derive(Default)]
    pub struct UprobeLinks {
        pub uprobe_add: Option<libbpf_rs::Link>,
        pub uretprobe_add: Option<libbpf_rs::Link>,
        pub uprobe_sub: Option<libbpf_rs::Link>,
        pub uretprobe_sub: Option<libbpf_rs::Link>,
    }

    pub struct UprobeSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: UprobeLinks,
    }

    unsafe impl Send for UprobeSkel<'_> {}
    unsafe impl Sync for UprobeSkel<'_> {}

    impl Skel for UprobeSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = UprobeLinks {
                uprobe_add: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                uretprobe_add: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                uprobe_sub: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(2)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                uretprobe_sub: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(3)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl UprobeSkel<'_> {
        pub fn progs(&self) -> UprobeProgs<'_> {
            UprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> UprobeProgsMut<'_> {
            UprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> UprobeMaps<'_> {
            UprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> UprobeMapsMut<'_> {
            UprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 15, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 117, 112, 114, 111, 98, 101, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101, 0, 117,
        112, 114, 111, 98, 101, 47, 47, 112, 114, 111, 99, 47, 115, 101, 108, 102, 47, 101, 120,
        101, 58, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 0, 117, 114, 101, 116, 112,
        114, 111, 98, 101, 47, 47, 112, 114, 111, 99, 47, 115, 101, 108, 102, 47, 101, 120, 101,
        58, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 0, 108, 105, 99, 101, 110, 115,
        101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 117, 112, 114, 111, 98, 101, 46, 98, 112, 102,
        46, 99, 0, 95, 95, 95, 95, 117, 112, 114, 111, 98, 101, 95, 97, 100, 100, 46, 95, 95, 95,
        95, 102, 109, 116, 0, 95, 95, 95, 95, 117, 114, 101, 116, 112, 114, 111, 98, 101, 95, 97,
        100, 100, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 117, 112, 114, 111, 98,
        101, 95, 115, 117, 98, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 117, 114, 101,
        116, 112, 114, 111, 98, 101, 95, 115, 117, 98, 46, 95, 95, 95, 95, 102, 109, 116, 0, 117,
        112, 114, 111, 98, 101, 95, 97, 100, 100, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101,
        95, 97, 100, 100, 0, 117, 112, 114, 111, 98, 101, 95, 115, 117, 98, 0, 117, 114, 101, 116,
        112, 114, 111, 98, 101, 95, 115, 117, 98, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101,
        108, 117, 112, 114, 111, 98, 101, 0, 46, 114, 101, 108, 117, 114, 101, 116, 112, 114, 111,
        98, 101, 0, 46, 114, 101, 108, 117, 112, 114, 111, 98, 101, 47, 47, 112, 114, 111, 99, 47,
        115, 101, 108, 102, 47, 101, 120, 101, 58, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117,
        98, 0, 46, 114, 101, 108, 117, 114, 101, 116, 112, 114, 111, 98, 101, 47, 47, 112, 114,
        111, 99, 47, 115, 101, 108, 102, 47, 101, 120, 101, 58, 117, 112, 114, 111, 98, 101, 100,
        95, 115, 117, 98, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 4, 0, 241, 255,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
        0, 0, 0, 1, 0, 8, 0, 34, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 1, 0, 8, 0, 64, 0, 0, 0,
        0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 1, 0, 8, 0, 98, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0,
        18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 18, 0, 4, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 18, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 64, 0, 0, 0, 0, 0, 0, 0, 12, 1, 0, 0, 18, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
        0, 0, 0, 0, 26, 1, 0, 0, 17, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 121,
        20, 104, 0, 0, 0, 0, 0, 121, 19, 112, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 183, 2, 0, 0, 34, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
        149, 0, 0, 0, 0, 0, 0, 0, 121, 19, 80, 0, 0, 0, 0, 0, 24, 1, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 183, 2, 0, 0, 30, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
        149, 0, 0, 0, 0, 0, 0, 0, 121, 20, 104, 0, 0, 0, 0, 0, 121, 19, 112, 0, 0, 0, 0, 0, 24, 1,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 34, 0, 0, 0, 133, 0, 0, 0, 6, 0,
        0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 19, 80, 0, 0, 0, 0, 0, 24,
        1, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 30, 0, 0, 0, 133, 0, 0, 0, 6,
        0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83,
        68, 47, 71, 80, 76, 0, 117, 112, 114, 111, 98, 101, 100, 95, 97, 100, 100, 32, 69, 78, 84,
        82, 89, 58, 32, 97, 32, 61, 32, 37, 100, 44, 32, 98, 32, 61, 32, 37, 100, 0, 117, 112, 114,
        111, 98, 101, 100, 95, 97, 100, 100, 32, 69, 88, 73, 84, 58, 32, 114, 101, 116, 117, 114,
        110, 32, 61, 32, 37, 100, 0, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 32, 69,
        78, 84, 82, 89, 58, 32, 97, 32, 61, 32, 37, 100, 44, 32, 98, 32, 61, 32, 37, 100, 0, 117,
        112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 32, 69, 88, 73, 84, 58, 32, 114, 101, 116,
        117, 114, 110, 32, 61, 32, 37, 100, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 144, 2, 0, 0, 144, 2, 0, 0, 73, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1,
        0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 3, 0,
        0, 0, 64, 0, 0, 0, 17, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0, 192, 0,
        0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 3, 0, 0, 0, 64, 1, 0, 0, 31, 0, 0,
        0, 3, 0, 0, 0, 128, 1, 0, 0, 35, 0, 0, 0, 3, 0, 0, 0, 192, 1, 0, 0, 39, 0, 0, 0, 3, 0, 0,
        0, 0, 2, 0, 0, 42, 0, 0, 0, 3, 0, 0, 0, 64, 2, 0, 0, 45, 0, 0, 0, 3, 0, 0, 0, 128, 2, 0, 0,
        48, 0, 0, 0, 3, 0, 0, 0, 192, 2, 0, 0, 51, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 54, 0, 0, 0, 3,
        0, 0, 0, 64, 3, 0, 0, 57, 0, 0, 0, 3, 0, 0, 0, 128, 3, 0, 0, 60, 0, 0, 0, 3, 0, 0, 0, 192,
        3, 0, 0, 68, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 71, 0, 0, 0, 3, 0, 0, 0, 64, 4, 0, 0, 74, 0,
        0, 0, 3, 0, 0, 0, 128, 4, 0, 0, 80, 0, 0, 0, 3, 0, 0, 0, 192, 4, 0, 0, 83, 0, 0, 0, 3, 0,
        0, 0, 0, 5, 0, 0, 86, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        13, 5, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0,
        1, 108, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 119, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 133, 0, 0,
        0, 1, 0, 0, 12, 4, 0, 0, 0, 144, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0,
        13, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 14,
        11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 14, 0, 0, 0, 12, 0, 0, 0, 34, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 14, 0, 0, 0, 12, 0, 0, 0, 30, 0, 0, 0, 214, 0,
        0, 0, 0, 0, 0, 14, 17, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0,
        0, 0, 7, 1, 0, 0, 0, 0, 0, 14, 17, 0, 0, 0, 0, 0, 0, 0, 225, 2, 0, 0, 1, 0, 0, 15, 13, 0,
        0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 233, 2, 0, 0, 4, 0, 0, 15, 128, 0, 0, 0, 16, 0,
        0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 18, 0, 0, 0, 34, 0, 0, 0, 30, 0, 0, 0, 19, 0, 0, 0, 64, 0,
        0, 0, 34, 0, 0, 0, 20, 0, 0, 0, 98, 0, 0, 0, 30, 0, 0, 0, 0, 112, 116, 95, 114, 101, 103,
        115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98,
        120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0,
        100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0, 99,
        115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0, 105, 110, 116, 0, 117, 112, 114, 111,
        98, 101, 95, 97, 100, 100, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101, 95, 97, 100, 100,
        0, 117, 112, 114, 111, 98, 101, 95, 115, 117, 98, 0, 117, 114, 101, 116, 112, 114, 111, 98,
        101, 95, 115, 117, 98, 0, 99, 104, 97, 114, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90,
        69, 95, 84, 89, 80, 69, 95, 95, 0, 76, 73, 67, 69, 78, 83, 69, 0, 95, 95, 95, 95, 117, 112,
        114, 111, 98, 101, 95, 97, 100, 100, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95,
        117, 114, 101, 116, 112, 114, 111, 98, 101, 95, 97, 100, 100, 46, 95, 95, 95, 95, 102, 109,
        116, 0, 95, 95, 95, 95, 117, 112, 114, 111, 98, 101, 95, 115, 117, 98, 46, 95, 95, 95, 95,
        102, 109, 116, 0, 95, 95, 95, 95, 117, 114, 101, 116, 112, 114, 111, 98, 101, 95, 115, 117,
        98, 46, 95, 95, 95, 95, 102, 109, 116, 0, 47, 114, 111, 111, 116, 47, 98, 112, 102, 45,
        115, 97, 109, 112, 108, 101, 115, 47, 114, 117, 115, 116, 45, 101, 120, 97, 109, 112, 108,
        101, 115, 47, 115, 114, 99, 47, 98, 112, 102, 47, 117, 112, 114, 111, 98, 101, 46, 98, 112,
        102, 46, 99, 0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 80, 82, 79, 66, 69, 40, 117, 112,
        114, 111, 98, 101, 95, 97, 100, 100, 44, 32, 105, 110, 116, 32, 97, 44, 32, 105, 110, 116,
        32, 98, 41, 0, 9, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 117, 112, 114,
        111, 98, 101, 100, 95, 97, 100, 100, 32, 69, 78, 84, 82, 89, 58, 32, 97, 32, 61, 32, 37,
        100, 44, 32, 98, 32, 61, 32, 37, 100, 34, 44, 32, 97, 44, 32, 98, 41, 59, 0, 105, 110, 116,
        32, 66, 80, 70, 95, 75, 82, 69, 84, 80, 82, 79, 66, 69, 40, 117, 114, 101, 116, 112, 114,
        111, 98, 101, 95, 97, 100, 100, 44, 32, 105, 110, 116, 32, 114, 101, 116, 41, 0, 9, 98,
        112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 117, 112, 114, 111, 98, 101, 100, 95,
        97, 100, 100, 32, 69, 88, 73, 84, 58, 32, 114, 101, 116, 117, 114, 110, 32, 61, 32, 37,
        100, 34, 44, 32, 114, 101, 116, 41, 59, 0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 80, 82,
        79, 66, 69, 40, 117, 112, 114, 111, 98, 101, 95, 115, 117, 98, 44, 32, 105, 110, 116, 32,
        97, 44, 32, 105, 110, 116, 32, 98, 41, 0, 9, 98, 112, 102, 95, 112, 114, 105, 110, 116,
        107, 40, 34, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 32, 69, 78, 84, 82, 89,
        58, 32, 97, 32, 61, 32, 37, 100, 44, 32, 98, 32, 61, 32, 37, 100, 34, 44, 32, 97, 44, 32,
        98, 41, 59, 0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 82, 69, 84, 80, 82, 79, 66, 69, 40,
        117, 114, 101, 116, 112, 114, 111, 98, 101, 95, 115, 117, 98, 44, 32, 105, 110, 116, 32,
        114, 101, 116, 41, 0, 9, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 117, 112,
        114, 111, 98, 101, 100, 95, 115, 117, 98, 32, 69, 88, 73, 84, 58, 32, 114, 101, 116, 117,
        114, 110, 32, 61, 32, 37, 100, 34, 44, 32, 114, 101, 116, 41, 59, 0, 48, 58, 49, 51, 0, 48,
        58, 49, 52, 0, 48, 58, 49, 48, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100,
        97, 116, 97, 0, 117, 112, 114, 111, 98, 101, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101,
        0, 117, 112, 114, 111, 98, 101, 47, 47, 112, 114, 111, 99, 47, 115, 101, 108, 102, 47, 101,
        120, 101, 58, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 0, 117, 114, 101, 116,
        112, 114, 111, 98, 101, 47, 47, 112, 114, 111, 99, 47, 115, 101, 108, 102, 47, 101, 120,
        101, 58, 117, 112, 114, 111, 98, 101, 100, 95, 115, 117, 98, 0, 0, 0, 0, 0, 0, 0, 0, 159,
        235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 68, 0, 0, 0, 228, 0, 0, 0, 40, 1, 0, 0,
        132, 0, 0, 0, 8, 0, 0, 0, 241, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 248, 2, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 36, 3,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 16, 0, 0, 0, 241, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0,
        0, 33, 1, 0, 0, 86, 1, 0, 0, 5, 32, 0, 0, 16, 0, 0, 0, 33, 1, 0, 0, 127, 1, 0, 0, 2, 40, 0,
        0, 48, 0, 0, 0, 33, 1, 0, 0, 86, 1, 0, 0, 5, 32, 0, 0, 248, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0,
        0, 33, 1, 0, 0, 183, 1, 0, 0, 5, 60, 0, 0, 8, 0, 0, 0, 33, 1, 0, 0, 225, 1, 0, 0, 2, 68, 0,
        0, 40, 0, 0, 0, 33, 1, 0, 0, 183, 1, 0, 0, 5, 60, 0, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        33, 1, 0, 0, 20, 2, 0, 0, 5, 88, 0, 0, 16, 0, 0, 0, 33, 1, 0, 0, 61, 2, 0, 0, 2, 96, 0, 0,
        48, 0, 0, 0, 33, 1, 0, 0, 20, 2, 0, 0, 5, 88, 0, 0, 36, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        33, 1, 0, 0, 117, 2, 0, 0, 5, 116, 0, 0, 8, 0, 0, 0, 33, 1, 0, 0, 159, 2, 0, 0, 2, 124, 0,
        0, 40, 0, 0, 0, 33, 1, 0, 0, 117, 2, 0, 0, 5, 116, 0, 0, 16, 0, 0, 0, 241, 2, 0, 0, 2, 0,
        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 210, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 215, 2, 0,
        0, 0, 0, 0, 0, 248, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 220, 2, 0, 0, 0, 0, 0, 0,
        2, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 210, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0,
        0, 0, 215, 2, 0, 0, 0, 0, 0, 0, 36, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 220, 2, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 152, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0,
        0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 3, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
        0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0,
        56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 34, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 3, 0,
        0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 16, 4, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 72, 4, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 4, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 0, 0, 9, 0, 0, 0, 64, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 4, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 45, 1, 0, 0, 9,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 4, 0, 0, 0, 0, 0, 0, 16, 0,
        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        59, 1, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 4, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 97, 1, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
        5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 16, 0, 0, 0, 0, 0, 0, 0, 138, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 24, 5, 0, 0, 0, 0, 0, 0, 241, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 11, 0, 0, 0, 0, 0, 0, 204, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
